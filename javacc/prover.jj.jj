/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\prover.jj.jj */
/*@egen*//************************************************
*	Begin of First Order Logic Parser           *
*************************************************/

options {
	STATIC = false;
}

PARSER_BEGIN(Parser)
	public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTParserState jjtree = new JJTParserState();

/*@egen*/

	}
PARSER_END(Parser)


/************************************************
*	Begin of Tokens                             *
*************************************************/

// Spaces
SKIP  : {" " | "\t" | "\n" | "\r" | "\r\n"}

// Conenctors
TOKEN : {<AND: "&&">}
TOKEN : {<OR: "||">}
TOKEN : {<IMPLICATION: "->">}
TOKEN : {<BICONDITIONAL: "<->">}
TOKEN : {<NEGATION: "~">}

// Quantifiers
TOKEN : {<FORALL: "forall">}
TOKEN : {<EXISTS: "exists">}

// Separators
TOKEN : {<LEFT_PAREN: "(">}
TOKEN : {<RIGHT_PAREN: ")">}
TOKEN : {<COMMA: ",">}

// Predicate Equal
TOKEN : {<EQUAL: "=">}

// Identifiers
TOKEN : {<#CAPITAL_LETTER: ["A"-"Z"]>}
TOKEN : {<#SMALL_LETTER: ["a"-"z"]>}
TOKEN : {<#DIGIT: ["0"-"9"]>}
TOKEN : {<SMALL_ID: <SMALL_LETTER> (<SMALL_LETTER> | <DIGIT>)*>}
TOKEN : {<CAPITAL_ID: <CAPITAL_LETTER> (<CAPITAL_LETTER> | <DIGIT>)*>}


/************************************************
*	Begin of Rules                              *
*************************************************/

private void negation():
{/*@bgen(jjtree) negation */
  SimpleNode jjtn000 = new SimpleNode(JJTNEGATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) negation */
        try {
/*@egen*/
	t = <NEGATION>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setToken(t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

private void var():
{/*@bgen(jjtree) var */
  SimpleNode jjtn000 = new SimpleNode(JJTVAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) var */
        try {
/*@egen*/
	t = <SMALL_ID>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setToken(t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

private void _const():
{/*@bgen(jjtree) _const */
  SimpleNode jjtn000 = new SimpleNode(JJT_CONST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) _const */
        try {
/*@egen*/
	t = <CAPITAL_ID>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setToken(t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

private void param():
{/*@bgen(jjtree) param */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) param */
        try {
/*@egen*/
	LOOKAHEAD(2)
	func() | _const() | var()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

private void paramList():
{/*@bgen(jjtree) paramList */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) paramList */
        try {
/*@egen*/
	param() (<COMMA> param())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

private void func():
{/*@bgen(jjtree) func */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) func */
        try {
/*@egen*/
	t = <SMALL_ID>
	<LEFT_PAREN> paramList() <RIGHT_PAREN>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setToken(t); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

private void pred():
{/*@bgen(jjtree) pred */
  SimpleNode jjtn000 = new SimpleNode(JJTPRED);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) pred */
        try {
/*@egen*/
	LOOKAHEAD(2)
	t = <CAPITAL_ID>
	<LEFT_PAREN> paramList() <RIGHT_PAREN>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setToken(t); } |
	param() t = <EQUAL> param()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ jjtn000.setToken(t); }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

private void connective():
{/*@bgen(jjtree) connective */
  SimpleNode jjtn000 = new SimpleNode(JJTCONNECTIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) connective */
        try {
/*@egen*/
	t = <AND>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ { jjtn000.setToken(t); } |
	t = <OR>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.setToken(t); } |
	t = <IMPLICATION>/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ { jjtn000.setToken(t); } |
	t = <BICONDITIONAL>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ { jjtn000.setToken(t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

private void quantifier():
{/*@bgen(jjtree) quantifier */
  SimpleNode jjtn000 = new SimpleNode(JJTQUANTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; }
{/*@bgen(jjtree) quantifier */
        try {
/*@egen*/
	t = <FORALL>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.setToken(t); } |
	t = <EXISTS>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.setToken(t); }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/*
private void wffPrime():
{}
{
	(LOOKAHEAD(2) connective() wff())*
}

private void wff():
{}
{
	LOOKAHEAD(2)
	pred() wffPrime() | negation() wff() wffPrime() |
	quantifier() var() <LEFT_PAREN> wff() wffPrime() <RIGHT_PAREN>
}
*/

private void wff():
{/*@bgen(jjtree) wff */
  SimpleNode jjtn000 = new SimpleNode(JJTWFF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) wff */
        try {
/*@egen*/
	LOOKAHEAD(2) <LEFT_PAREN> pred() <RIGHT_PAREN> |
 	LOOKAHEAD(2) <LEFT_PAREN> negation() wff() <RIGHT_PAREN> |
	LOOKAHEAD(2) <LEFT_PAREN> wff() connective() wff() <RIGHT_PAREN> |
	LOOKAHEAD(2) <LEFT_PAREN> quantifier() var() wff() <RIGHT_PAREN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

private void wffList():
{/*@bgen(jjtree) wffList */
  SimpleNode jjtn000 = new SimpleNode(JJTWFFLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) wffList */
        try {
/*@egen*/
	wff() (<COMMA> wff())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

public SimpleNode start():
{/*@bgen(jjtree) start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) start */
        try {
/*@egen*/
	wffList() <EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
	{ return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}