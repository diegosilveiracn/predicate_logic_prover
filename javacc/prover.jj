/************************************************
*	Begin of First Order Logic Parser           *
*************************************************/

options {
	STATIC = false;
}

PARSER_BEGIN(Parser)
	public class Parser {

	}
PARSER_END(Parser)


/************************************************
*	Begin of Tokens                             *
*************************************************/

// Spaces
SKIP  : {" " | "\t" | "\n" | "\r" | "\r\n"}

// Conenctors
TOKEN : {<AND: "&&">}
TOKEN : {<OR: "||">}
TOKEN : {<IMPLICATION: "->">}
TOKEN : {<BICONDITIONAL: "<->">}
TOKEN : {<NEGATION: "~">}

// Quantifiers
TOKEN : {<FORALL: "forall">}
TOKEN : {<EXISTS: "exists">}

// Separators
TOKEN : {<LEFT_PAREN: "(">}
TOKEN : {<RIGHT_PAREN: ")">}
TOKEN : {<COMMA: ",">}

// Predicate Equal
TOKEN : {<EQUAL: "=">}

// Identifiers
TOKEN : {<#CAPITAL_LETTER: ["A"-"Z"]>}
TOKEN : {<#SMALL_LETTER: ["a"-"z"]>}
TOKEN : {<#DIGIT: ["0"-"9"]>}
TOKEN : {<SMALL_ID: <SMALL_LETTER> (<SMALL_LETTER> | <DIGIT>)*>}
TOKEN : {<CAPITAL_ID: <CAPITAL_LETTER> (<CAPITAL_LETTER> | <DIGIT>)*>}


/************************************************
*	Begin of Rules                              *
*************************************************/

private void negation():
{ Token t; }
{
	t = <NEGATION>
	{ jjtThis.setToken(t); }
}

private void var():
{ Token t; }
{
	t = <SMALL_ID>
	{ jjtThis.setToken(t); }
}

private void _const():
{ Token t; }
{
	t = <CAPITAL_ID>
	{ jjtThis.setToken(t); }
}

private void param():
{}
{
	LOOKAHEAD(2)
	func() | _const() | var()
}

private void paramList():
{}
{
	param() (<COMMA> param())*
}

private void func():
{ Token t; }
{
	t = <SMALL_ID>
	<LEFT_PAREN> paramList() <RIGHT_PAREN>
	{ jjtThis.setToken(t); }
}

private void pred():
{ Token t; }
{
	LOOKAHEAD(2)
	t = <CAPITAL_ID>
	<LEFT_PAREN> paramList() <RIGHT_PAREN>
	{ jjtThis.setToken(t); } |
	param() t = <EQUAL> param()
	{ jjtThis.setToken(t); }
}

private void connective():
{ Token t; }
{
	t = <AND> { jjtThis.setToken(t); } |
	t = <OR> { jjtThis.setToken(t); } |
	t = <IMPLICATION> { jjtThis.setToken(t); } |
	t = <BICONDITIONAL> { jjtThis.setToken(t); }
	
}

private void quantifier():
{ Token t; }
{
	t = <FORALL> { jjtThis.setToken(t); } |
	t = <EXISTS> { jjtThis.setToken(t); }
}

/*
private void wffPrime():
{}
{
	(LOOKAHEAD(2) connective() wff())*
}

private void wff():
{}
{
	LOOKAHEAD(2)
	pred() wffPrime() | negation() wff() wffPrime() |
	quantifier() var() <LEFT_PAREN> wff() wffPrime() <RIGHT_PAREN>
}
*/

private void wff():
{}
{
	LOOKAHEAD(2) <LEFT_PAREN> pred() <RIGHT_PAREN> |
 	LOOKAHEAD(2) <LEFT_PAREN> negation() wff() <RIGHT_PAREN> |
	LOOKAHEAD(2) <LEFT_PAREN> wff() connective() wff() <RIGHT_PAREN> |
	LOOKAHEAD(2) <LEFT_PAREN> quantifier() var() wff() <RIGHT_PAREN>
}

private void wffList():
{}
{
	wff() (<COMMA> wff())*
}

public SimpleNode start():
{}
{
	wffList() <EOF>
	{ return jjtThis; }
}